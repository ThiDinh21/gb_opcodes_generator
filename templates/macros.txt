{% macro nop(op) %}
{% endmacro %}

{% macro ld(op) %}
    let res = {{ op.operands[1] | getter(bits=op.bits) }};
    {{ op.operands[0] | setter(bits=op.bits) }}res);
{% endmacro %}

{% macro push(op) %}
    self.stack_push_u16({{ op.operands[0] | getter(bits=op.bits) }});
{% endmacro %}

{% macro pop(op) %}
    let res = self.stack_pop_u16();
    {{ op.operands[0] | setter(bits=op.bits) }}res);
{% endmacro %}

{% macro add(op) %}
    (res, z, h, c) = alu::add_u{{ op.bits }}({{ op.operands[0] | getter(bits=op.bits) }}, {{ op.operands[1] | getter(bits=op.bits) }}, false);
    {{ op.operands[0] | setter(bits=op.bits) }}res);
{% endmacro %}

{% macro adc(op) %}
    let carry = self.status.contains(StatusFlags::C);
    (res, z, h, c) = alu::add_u{{ op.bits }}({{ op.operands[0] | getter(bits=op.bits) }}, {{ op.operands[1] | getter(bits=op.bits) }}, carry);
    {{ op.operands[0] | setter(bits=op.bits) }}res);
{% endmacro %}

{% macro sub(op) %}
    (res, z, h, c) = alu::sub_u{{ op.bits }}({{ op.operands[0] | getter(bits=op.bits) }}, {{ op.operands[1] | getter(bits=op.bits) }}, false);
    {{ op.operands[0] | setter(bits=op.bits) }}res);
{% endmacro %}

{% macro sbc(op) %}
    let carry = self.status.contains(StatusFlags::C);
    (res, z, h, c) = alu::sub_u{{ op.bits }}({{ op.operands[0] | getter(bits=op.bits) }}, {{ op.operands[1] | getter(bits=op.bits) }}, carry);
    {{ op.operands[0] | setter(bits=op.bits) }}res);
{% endmacro %}

{% macro and(op) %}
    self.a = self.a & {{ op.operands[1] | getter(bits=op.bits) }};
    let z = self.a == 0;
{% endmacro %}

{% macro or(op) %}
    self.a = self.a | {{ op.operands[1] | getter(bits=op.bits) }};
    let z = self.a == 0;
{% endmacro %}

{% macro xor(op) %}
    self.a = self.a ^ {{ op.operands[1] | getter(bits=op.bits) }};
    let z = self.a == 0;
{% endmacro %}

{% macro cp(op) %}
    let x = {{ op.operands[1] | getter(bits=op.bits) }};
    let (res, _, h, _) = alu::sub_u8(self.a, x, false);
    let z = res == 0;
    let c = self.a < x;
{% endmacro %}

{% macro inc(op) %}
    let (res, z, h, _) = alu::add_u{{ op.bits }}({{ op.operands[0] | getter(bits=op.bits) }}, 1, false);
    {{ op.operands[0] | setter(bits=op.bits) }}res);
{% endmacro %}

{% macro dec(op) %}
    let (res, z, h, _) = alu::sub_u{{ op.bits }}({{ op.operands[0] | getter(bits=op.bits) }}, 1, false);
    {{ op.operands[0] | setter(bits=op.bits) }}res);
{% endmacro %}

{% macro swap(op) %}
    let mut res = {{ op.operands[0] | getter(bits=op.bits) }};
    let most_sig_nib = (x & 0b0000_1111) << 4;
    let least_sig_nib =(x & 0b1111_0000) >> 4;
    
    res = most_sig_nib | least_sig_nib; 
    {{ op.operands[0] | setter(bits=op.bits) }}res);
    let z = res == 0;
{% endmacro %}

{% macro daa(op) %}
    let mut adj = 0;

    let v = self.a as usize;

    if self.get_hf() || (!self.get_nf() && (v & 0x0F > 0x09)) {
        adj |= 0x06;
    }

    let c = if self.get_cf() || (!self.get_nf() && v > 0x99) {
        adj |= 0x60;
        true
    } else {
        false
    };

    let res = if self.get_nf() {
        v - adj
    } else {
        v + adj
    };
    let res = (res & 0xFF) as u8;
    let z = res == 0;

    self.set_a(res);
{% endmacro %}

{% macro cpl(op) %}
    self.a = !self.a;
{% endmacro %}

{% macro ccf(op) %}
    let c = !self.get_cf();
{% endmacro %}

{% macro scf(op) %}
{% endmacro %}

{% macro halt(op) %}
    self.halt();
{% endmacro %}

{% macro stop(op) %}
    self.stop();
{% endmacro %}

{% macro di(op) %}
    self.disable_interrupt();
{% endmacro %}

{% macro ei(op) %}
    self.enable_interrupt();
{% endmacro %}

{% macro rlca(op) %}
    let c = self.a & 0x80 != 0;
    self.a = self.a.rotate_left(1);
{% endmacro %}

{% macro rla(op) %}
    let c = self.a & 0x80 != 0;
    self.a = self.a.wrapping_shl(1);
    self.a |= if self.get_cf() { 1 } else { 0 }; 
{% endmacro %}

{% macro rrca(op) %}
    let c = self.a & 0x01 != 0;
    self.a = self.a.rotate_right(1);
{% endmacro %}

{% macro rra(op) %}
    let c = self.a & 0x01 != 0;
    self.a = self.a.wrapping_shr(1);
    self.a |= if self.get_cf() { 0x80 } else { 0 }; 
{% endmacro %}

{% macro rlc(op) %}
    let v = {{ op.operands[0] | getter(bits=op.bits) }};
    let res = v.rotate_left(1);
    {{ op.operands[0] | setter(bits=op.bits) }}res);

    let z = res == 0;
    let c = v & 0x80 != 0;
{% endmacro %}

{% macro rl(op) %}
    let v = {{ op.operands[0] | getter(bits=op.bits) }};
    
    let mut res = v.wrapping_shl(1);
    res |= if self.get_cf() { 1 } else { 0 };

    {{ op.operands[0] | setter(bits=op.bits) }}res);

    let z = res == 0;
    let c = v & 0x80 != 0;
{% endmacro %}

{% macro rrc(op) %}
    let v = {{ op.operands[0] | getter(bits=op.bits) }};
    let res = v.rotate_right(1);
    {{ op.operands[0] | setter(bits=op.bits) }}res);

    let z = res == 0;
    let c = v & 0x01 != 0;
{% endmacro %}

{% macro rr(op) %}
    let v = {{ op.operands[0] | getter(bits=op.bits) }};
    
    let mut res = v.wrapping_shr(1);
    res |= if self.get_cf() { 0x80 } else { 0 };

    {{ op.operands[0] | setter(bits=op.bits) }}res);

    let z = res == 0;
    let c = v & 0x01 != 0;
{% endmacro %}

{% macro sla(op) %}
  let v = {{ op.operands[0] | getter(bits=op.bits) }};
  let res = v.wrapping_shl(1);
  {{ op.operands[0] | setter(bits=op.bits) }}res);

  let z = v == 0;
  let c = v & 0x80 != 0;
{% endmacro %}

{% macro sra(op) %}
  let v = {{ op.operands[0] | getter(bits=op.bits) }};
  let msb = v & 0x80;
  let res = v.wrapping_shr(1);
  let res = res | msb;
  {{ op.operands[0] | setter(bits=op.bits) }}res);

  let z = res == 0;
  let c = v & 0x01 != 0;
{% endmacro %}

{% macro srl(op) %}
  let v = {{ op.operands[0] | getter(bits=op.bits) }};
  let res = v.wrapping_shr(1);
  {{ op.operands[0] | setter(bits=op.bits) }}res);

  let z = res == 0;
  let c = v & 0x01 != 0;
{% endmacro %}

{% macro bit(op) %}
    let test_bit = 1 << {{ op.operands[0] | getter(bits=op.bits) }};
    let v = {{ op.operands[1] | getter(bits=op.bits) }};
    let z = (v & test_bit) == 0;
{% endmacro %}

{% macro set(op) %}
    let test_bit = 1 << {{ op.operands[0] | getter(bits=op.bits) }};
    let v = {{ op.operands[1] | getter(bits=op.bits) }};
    {{ op.operands[1] | setter(bits=op.bits) }}v | test_bits);
{% endmacro %}

{% macro res(op) %}
    let test_bit = !(1 << {{ op.operands[0] | getter(bits=op.bits) }});
    let v = {{ op.operands[1] | getter(bits=op.bits) }};
    {{ op.operands[1] | setter(bits=op.bits) }}v & test_bits);
{% endmacro %}

{% macro jp(op) %}
    self.program_counter = {{ op.operands[0] | getter(bits=16) }};
{% endmacro %}

{% macro jpif(op) %}
    let flg = {{ op.operands[0] | getter(bits=16) }};
    if flg {
        let pc = {{ op.operands[1] | getter(bits=16) }};
        self.program_counter = pc;
        return {{ op.cycles | get_branch_cycle }};
    }
{% endmacro %}

{% macro jr(op) %}
    self.cpu_jr();
{% endmacro %}

{% macro jrif(op) %}
    let flg = {{ op.operands[0] | getter(bits=8) }};
    if flg {
        self.cpu_jr();
        return {{ op.cycles | get_branch_cycle }};
    }
{% endmacro %}

{% macro call(op) %}
    self.stack_push_u16(self.program_counter.wrapping_add(2));
    self.program_counter = {{ op.operands[0] | getter(bits=16) }};
{% endmacro %}

{% macro callif(op) %}
    let flg = {{ op.operands[0] | getter(bits=8) }};
    if flg {
        self.stack_push_u16(self.program_counter.wrapping_add(2));
        self.program_counter = {{ op.operands[1] | getter(bits=16) }};
        return {{ op.cycles | get_branch_cycle }};
    }
{% endmacro %}

{% macro rst(op) %}
    self.stack_push_u16(self.program_counter);
    self.program_counter = {{ op.operands[0] | getter(bits=op.bits) }};
{% endmacro %}

{% macro ret(op) %}
    self.program_counter = self.stack_pop_u16();
{% endmacro %}