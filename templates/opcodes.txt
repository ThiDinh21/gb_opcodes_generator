{% import "macros.txt" as macros  %}
use crate::cpu::alu;
use lazy_static::lazy_static;
use std::collections::HashMap;

pub struct Opcode {
    pub code: u16,
    pub mnemonic: &'static str,
    pub bytes: u8,
}

impl Opcode {
    pub fn new(code: u8, mnemonic: &'static str, bytes: u8, cycles: u8) -> Self {
        Opcode {
            code,
            mnemonic,
            bytes,
        }
    }
}

lazy_static! {
    pub static ref OPCODES_LIST: Vec<Opcode> = vec![
        {% for op in opcodes -%}
            Opcode::new(0x{{op.code}}, "{{op.mnemonic}}", {{op.size}}),
        {% endfor %}
    ];

    pub static ref CPU_OPCODES: HashMap<u8, &'static Opcode> = {
        let mut map = HashMap::new();
        for opcode in OPCODES_LIST.iter() {
            map.insert(opcode.code, opcode);
        }
        map
    }
}

impl CPU {
{% for op in opcodes %}
    {%- if op.operator != "CALL" -%}
        {% continue %}
    {%- endif %}

    /// {{ op.mnemonic }}
    #[allow(unused_variables)]
    fn op_{{ op.code | lower }}(&mut self, op_size: u8) -> u8 {
        {%- if op.operator == "NOP" -%}
        {{ macros::nop(op=op) }}

        {%- elif op.operator == "LD" -%}
        {{ macros::ld(op=op) }}
            {%- if "HL+" in op.mnemonic -%}
            self.set_hl(self.get_hl.wrapping_add(1));
            {%- elif "HL-" in op.mnemonic -%}
            self.set_hl(self.get_hl.wrapping_sub(1));
            {%- endif -%}

        {%- elif op.operator == "PUSH" -%}
        {{ macros::push(op=op) }}

        {%- elif op.operator == "POP" -%}
        {{ macros::pop(op=op) }}

        {%- elif op.operator == "ADD" -%}
        {{ macros::add(op=op) }}

        {%- elif op.operator == "ADC" -%}
        {{ macros::adc(op=op) }}

        {%- elif op.operator == "SUB" -%}
        {{ macros::sub(op=op) }}

        {%- elif op.operator == "SBC" -%}
        {{ macros::sbc(op=op) }}

        {%- elif op.operator == "AND" -%}
        {{ macros::and(op=op) }}

        {%- elif op.operator == "OR" -%}
        {{ macros::or(op=op) }}

        {%- elif op.operator == "XOR" -%}
        {{ macros::xor(op=op) }}

        {%- elif op.operator == "CP" -%}
        {{ macros::cp(op=op) }}

        {%- elif op.operator == "INC" -%}
        {{ macros::inc(op=op) }}

        {%- elif op.operator == "DEC" -%}
        {{ macros::dec(op=op) }}

        {%- elif op.operator == "SWAP" -%}
        {{ macros::swap(op=op) }}

        {%- elif op.operator == "DAA" -%}
        {{ macros::daa(op=op) }}

        {%- elif op.operator == "CPL" -%}
        {{ macros::cpl(op=op) }}

        {%- elif op.operator == "CCF" -%}
        {{ macros::ccf(op=op) }}

        {%- elif op.operator == "SCF" -%}
        {{ macros::scf(op=op) }}

        {%- elif op.operator == "HALT" -%}
        {{ macros::halt(op=op) }}

        {%- elif op.operator == "STOP" -%}
        {{ macros::stop(op=op) }}

        {%- elif op.operator == "DI" -%}
        {{ macros::di(op=op) }}

        {%- elif op.operator == "EI" -%}
        {{ macros::ei(op=op) }}

        {%- elif op.operator == "RLCA" -%}
        {{ macros::rlca(op=op) }}

        {%- elif op.operator == "RLA" -%}
        {{ macros::rla(op=op) }}

        {%- elif op.operator == "RRCA" -%}
        {{ macros::rrca(op=op) }}

        {%- elif op.operator == "RRA" -%}
        {{ macros::rra(op=op) }}

        {%- elif op.operator == "RLC" -%}
        {{ macros::rlc(op=op) }}

        {%- elif op.operator == "RL" -%}
        {{ macros::rl(op=op) }}

        {%- elif op.operator == "RRC" -%}
        {{ macros::rrc(op=op) }}

        {%- elif op.operator == "RR" -%}
        {{ macros::rr(op=op) }}

        {%- elif op.operator == "SLA" -%}
        {{ macros::sla(op=op) }}

        {%- elif op.operator == "SRA" -%}
        {{ macros::sra(op=op) }}

        {%- elif op.operator == "SRL" -%}
        {{ macros::srl(op=op) }}

        {%- elif op.operator == "BIT" -%}
        {{ macros::bit(op=op) }}

        {%- elif op.operator == "SET" -%}
        {{ macros::set(op=op) }}

        {%- elif op.operator == "RES" -%}
        {{ macros::res(op=op) }}

        {%- elif op.operator == "JP" -%}
        {%- if op.operands | is_branch_jp  == true -%}
            {{ macros::jpif(op=op) }}
        {%- else -%}
            {{ macros::jp(op=op) }}            
        {%- endif -%}

        {%- elif op.operator == "JR" -%}
        {%- if op.operands | is_branch_jp  == true -%}
            {{ macros::jrif(op=op) }}
        {%- else -%}
            {{ macros::jr(op=op) }}            
        {%- endif -%}

        {%- elif op.operator == "CALL" -%}
        {%- if op.operands | is_branch_jp  == true -%}
            {{ macros::callif(op=op) }}
        {%- else -%}
            {{ macros::call(op=op) }}            
        {%- endif -%}

        {%- else -%}
        LMAO XD {{ op.code }}

        {%- endif -%}

        {% if op.code != "00F1" %}
        {{ op.z | set_flag(flg="Z") }}
        {{ op.n | set_flag(flg="N") }}
        {{ op.h | set_flag(flg="H") }}
        {{ op.c | set_flag(flg="C") }}
        {% endif %}
        
        {{ op.cycles | get_cycles }}
    }

    
{% endfor %}
}