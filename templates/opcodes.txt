{% import "macros.txt" as macros  %}
use crate::cpu::alu;
use lazy_static::lazy_static;
use std::collections::HashMap;

pub struct Opcode {
    pub code: u16,
    pub mnemonic: &'static str,
    pub bytes: u8,
}

impl Opcode {
    pub fn new(code: u8, mnemonic: &'static str, bytes: u8, cycles: u8) -> Self {
        Opcode {
            code,
            mnemonic,
            bytes,
        }
    }
}

lazy_static! {
    pub static ref OPCODES_LIST: Vec<Opcode> = vec![
        {% for op in opcodes -%}
            Opcode::new(0x{{op.code}}, "{{op.mnemonic}}", {{op.size}}),
        {% endfor %}
    ];

    pub static ref CPU_OPCODES: HashMap<u8, &'static Opcode> = {
        let mut map = HashMap::new();
        for opcode in OPCODES_LIST.iter() {
            map.insert(opcode.code, opcode);
        }
        map
    }
}

impl CPU {
{% for op in opcodes %}
    {%- if op.operator != "POP" -%}
        {% continue %}
    {%- endif -%}

    /// {{ op.mnemonic }}
    #[allow(unused_variables)]
    fn op_{{op.code}}(&mut self, op_size: u8) -> u8 {
        {%- if op.operator == "NOP" -%}
        {{ macros::nop(op=op) }}

        {%- elif op.operator == "LD" -%}
        {{ macros::ld(op=op) }}
            {%- if "HL+" in op.mnemonic -%}
            self.set_hl(self.get_hl.wrapping_add(1));
            {%- elif "HL-" in op.mnemonic -%}
            self.set_hl(self.get_hl.wrapping_sub(1));
            {%- endif -%}

        {%- elif op.operator == "ADD" -%}
        {{ macros::add(op=op) }}

        {%- elif op.operator == "PUSH" -%}
        {{ macros::push(op=op) }}

        {%- elif op.operator == "POP" -%}
        {{ macros::pop(op=op) }}

        {%- endif -%}

        {{ op.z | set_flag(flg="Z") }}
        {{ op.n | set_flag(flg="N") }}
        {{ op.h | set_flag(flg="H") }}
        {{ op.c | set_flag(flg="C") }}

        {{ op.cycles | get_cycles }}
    }

    
{% endfor %}
}